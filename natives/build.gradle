import org.gradle.internal.jvm.Jvm
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'cpp-library'
}

def onWindows = Os.isFamily(Os.FAMILY_WINDOWS)
def onMac = Os.isFamily(Os.FAMILY_MAC)

library {

    baseName = onWindows ? 'libImagineBreaker' : 'ImagineBreaker'

    binaries.configureEach { CppSharedLibrary library ->
        def compileTask = library.compileTask.get()

        if (compileTask.name.contains("Release")) {
            compileTask.debuggable(false)
        }

        compileTask.includes.from("${Jvm.current().javaHome}/include")

        def osFamily = library.targetPlatform.targetMachine.operatingSystemFamily
        if (osFamily.macOs) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/darwin")
        } else if (osFamily.linux) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/linux")
        } else if (osFamily.windows) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/win32")
        }

        compileTask.source.from fileTree(dir: "src/main/c", include: "**/*.c")

        def toolChain = library.toolChain
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.addAll(["/TC"])
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs.addAll(["-x", "c", "-std=c11"])
        }
    }

    targetMachines = [
            machines.windows.x86_64,
            machines.windows.x86,
            machines.macOS.x86_64,
            machines.macOS.x86,
            machines.linux.x86_64,
            machines.linux.x86
    ]

}

tasks.register('actionsBuild') {
    group 'build'
    if (onWindows) {
        dependsOn 'linkReleaseWindowsX86-64', 'linkReleaseWindowsX86'
    } else if (onMac) {
        dependsOn 'linkReleaseMacosX86-64', 'linkReleaseMacosX86'
    } else {
        dependsOn 'linkReleaseLinuxX86-64', 'linkReleaseLinuxX86'
    }
}