import org.gradle.internal.jvm.Jvm
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'cpp-library'
}

library {

    def archString = System.getProperty('os.arch')
    def archBits = archString.contains('64') ? 'x64' : 'x32'

    baseName = (Os.isFamily(Os.FAMILY_WINDOWS) ? 'libImagineBreaker' : 'ImagineBreaker') + "_$archBits"

    binaries.configureEach { CppBinary binary ->
        def compileTask = binary.compileTask.get()
        compileTask.includes.from("${Jvm.current().javaHome}/include")

        def osFamily = binary.targetPlatform.targetMachine.operatingSystemFamily
        if (osFamily.macOs) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/darwin")
        } else if (osFamily.linux) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/linux")
        } else if (osFamily.windows) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/win32")
        }

        compileTask.source.from fileTree(dir: "src/main/c", include: "**/*.c")

        def toolChain = binary.toolChain
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.addAll(["/TC"])
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs.addAll(["-x", "c", "-std=c11"])
        }
    }

    targetMachines = [ machines.windows.x86_64, machines.macOS.x86_64, machines.linux.x86_64 ]

}

tasks.named('assemble').configure {
    finalizedBy 'moveNative'
}

tasks.register('moveNative', Copy) {
    group 'build'
    from 'build/lib/main/debug/'
    include '**/**.dll', '**/**.so', '**/**.dylib'
    eachFile {
        it.path = it.name
    }
    into 'build/output'
    doLast {
        file('build/output').eachDir {
            it.delete()
        }
    }
}